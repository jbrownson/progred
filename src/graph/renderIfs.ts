import { bindMaybe, mapMaybe, Maybe } from "../lib/Maybe"
import { Cursor } from "./Cursor"
import { D } from "./D"
import * as G from "./graph"
import { descend, Render } from "./R"
import { renderOtherFields } from "./renderOtherFields"

export function renderIfAlgebraicType(f: (_name: D, _ctorOrAlgebraicTypes: D, __algebraicType: G.AlgebraicType, cursor: Cursor) => Maybe<D>, rs: {name?: Render, ctorOrAlgebraicTypes?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.AlgebraicType.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.ctorOrAlgebraicTypesField.id, rs.ctorOrAlgebraicTypes), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField,G.ctorOrAlgebraicTypesField]))) }
export function renderIfAnd(f: (__and: G.And, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.And.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfApp(f: (_name: D, __app: G.App, cursor: Cursor) => Maybe<D>, rs: {name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.App.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField]))) }
export function renderIfAppPlatform(f: (_app: D, _platform: D, __appPlatform: G.AppPlatform, cursor: Cursor) => Maybe<D>, rs: {app?: Render, platform?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.AppPlatform.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.appField.id, rs.app), descend(cursor, x.id, G.platformField.id, rs.platform), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.appField,G.platformField]))) }
export function renderIfArrayLiteral(f: (_expressions: D, __arrayLiteral: G.ArrayLiteral, cursor: Cursor) => Maybe<D>, rs: {expressions?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.ArrayLiteral.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.expressionsField.id, rs.expressions), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.expressionsField]))) }
export function renderIfArrowFunction(f: (_parameters: D, _statements: D, __arrowFunction: G.ArrowFunction, cursor: Cursor) => Maybe<D>, rs: {parameters?: Render, statements?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.ArrowFunction.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.parametersField.id, rs.parameters), descend(cursor, x.id, G.statementsField.id, rs.statements), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.parametersField,G.statementsField]))) }
export function renderIfAssignment(f: (__assignment: G.Assignment, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Assignment.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfAtomicType(f: (_name: D, __atomicType: G.AtomicType, cursor: Cursor) => Maybe<D>, rs: {name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.AtomicType.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField]))) }
export function renderIfAWSCredentials(f: (_accessKeyId: D, _secretAccessKey: D, __awsCredentials: G.AWSCredentials, cursor: Cursor) => Maybe<D>, rs: {accessKeyId?: Render, secretAccessKey?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.AWSCredentials.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.accessKeyIdField.id, rs.accessKeyId), descend(cursor, x.id, G.secretAccessKeyField.id, rs.secretAccessKey), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.accessKeyIdField,G.secretAccessKeyField]))) }
export function renderIfBinaryInline(f: (_left: D, _binaryOperator: D, _right: D, __binaryInline: G.BinaryInline, cursor: Cursor) => Maybe<D>, rs: {left?: Render, binaryOperator?: Render, right?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.BinaryInline.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.leftField.id, rs.left), descend(cursor, x.id, G.binaryOperatorField.id, rs.binaryOperator), descend(cursor, x.id, G.rightField.id, rs.right), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.leftField,G.binaryOperatorField,G.rightField]))) }
export function renderIfBlock(f: (_children: D, __block: G.Block, cursor: Cursor) => Maybe<D>, rs: {children?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Block.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.childrenField.id, rs.children), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.childrenField]))) }
export function renderIfBradParams(f: (_adProbability: D, _minimumCheckpointsPerAd: D, _timeIntervalPerAd: D, _fetchPeriod: D, _tiers: D, __bradParams: G.BradParams, cursor: Cursor) => Maybe<D>, rs: {adProbability?: Render, minimumCheckpointsPerAd?: Render, timeIntervalPerAd?: Render, fetchPeriod?: Render, tiers?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.BradParams.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.adProbabilityField.id, rs.adProbability), descend(cursor, x.id, G.minimumCheckpointsPerAdField.id, rs.minimumCheckpointsPerAd), descend(cursor, x.id, G.timeIntervalPerAdField.id, rs.timeIntervalPerAd), descend(cursor, x.id, G.fetchPeriodField.id, rs.fetchPeriod), descend(cursor, x.id, G.tiersField.id, rs.tiers), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.adProbabilityField,G.minimumCheckpointsPerAdField,G.timeIntervalPerAdField,G.fetchPeriodField,G.tiersField]))) }
export function renderIfConditional(f: (_condition: D, _trueExpression: D, _falseExpression: D, __conditional: G.Conditional, cursor: Cursor) => Maybe<D>, rs: {condition?: Render, trueExpression?: Render, falseExpression?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Conditional.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.conditionField.id, rs.condition), descend(cursor, x.id, G.trueExpressionField.id, rs.trueExpression), descend(cursor, x.id, G.falseExpressionField.id, rs.falseExpression), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.conditionField,G.trueExpressionField,G.falseExpressionField]))) }
export function renderIfConst(f: (__const: G.Const, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Const.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfCtor(f: (_name: D, _fields: D, __ctor: G.Ctor, cursor: Cursor) => Maybe<D>, rs: {name?: Render, fields?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Ctor.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.fieldsField.id, rs.fields), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField,G.fieldsField]))) }
export function renderIfCtorField(f: (_ctor: D, __ctorField: G.CtorField, cursor: Cursor) => Maybe<D>, rs: {ctor?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.CtorField.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.ctorField.id, rs.ctor), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.ctorField]))) }
export function renderIfDescend(f: (_field: D, _contextRender: D, __descend: G.Descend, cursor: Cursor) => Maybe<D>, rs: {field?: Render, contextRender?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Descend.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.fieldField.id, rs.field), descend(cursor, x.id, G.contextRenderField.id, rs.contextRender), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.fieldField,G.contextRenderField]))) }
export function renderIfDifference(f: (__difference: G.Difference, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Difference.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfDispatch(f: (_renders: D, __dispatch: G.Dispatch, cursor: Cursor) => Maybe<D>, rs: {renders?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Dispatch.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.rendersField.id, rs.renders), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.rendersField]))) }
export function renderIfDot(f: (__dot: G.Dot, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Dot.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfEmptyList(f: (__emptyList: G.EmptyList, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.EmptyList.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfEquals(f: (__equals: G.Equals, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Equals.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfEvaluate(f: (_javascriptProgram: D, __evaluate: G.Evaluate, cursor: Cursor) => Maybe<D>, rs: {javascriptProgram?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Evaluate.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.javascriptProgramField.id, rs.javascriptProgram), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.javascriptProgramField]))) }
export function renderIfExtern(f: (_name: D, __extern: G.Extern, cursor: Cursor) => Maybe<D>, rs: {name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Extern.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField]))) }
export function renderIfField(f: (_name: D, _type: D, __field: G.Field, cursor: Cursor) => Maybe<D>, rs: {name?: Render, type?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Field.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.typeField.id, rs.type), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField,G.typeField]))) }
export function renderIfFunctionCall(f: (_function: D, _arguments: D, __functionCall: G.FunctionCall, cursor: Cursor) => Maybe<D>, rs: {function?: Render, arguments?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.FunctionCall.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.functionField.id, rs.function), descend(cursor, x.id, G.argumentsField.id, rs.arguments), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.functionField,G.argumentsField]))) }
export function renderIfFunctionDeclaration(f: (_name: D, _parameters: D, _statements: D, __functionDeclaration: G.FunctionDeclaration, cursor: Cursor) => Maybe<D>, rs: {name?: Render, parameters?: Render, statements?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.FunctionDeclaration.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.parametersField.id, rs.parameters), descend(cursor, x.id, G.statementsField.id, rs.statements), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField,G.parametersField,G.statementsField]))) }
export function renderIfGreaterThan(f: (__greaterThan: G.GreaterThan, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.GreaterThan.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfGreaterThanOrEqualTo(f: (__greaterThanOrEqualTo: G.GreaterThanOrEqualTo, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.GreaterThanOrEqualTo.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfHouseAdEntry(f: (_weight: D, _lifetimeCap: D, _name: D, _actionURL: D, _images: D, __houseAdEntry: G.HouseAdEntry, cursor: Cursor) => Maybe<D>, rs: {weight?: Render, lifetimeCap?: Render, name?: Render, actionURL?: Render, images?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.HouseAdEntry.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.weightField.id, rs.weight), descend(cursor, x.id, G.lifetimeCapField.id, rs.lifetimeCap), descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.actionURLField.id, rs.actionURL), descend(cursor, x.id, G.imagesField.id, rs.images), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.weightField,G.lifetimeCapField,G.nameField,G.actionURLField,G.imagesField]))) }
export function renderIfHouseAdImage(f: (_width: D, _height: D, _extension: D, _sha1: D, __houseAdImage: G.HouseAdImage, cursor: Cursor) => Maybe<D>, rs: {width?: Render, height?: Render, extension?: Render, sha1?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.HouseAdImage.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.widthField.id, rs.width), descend(cursor, x.id, G.heightField.id, rs.height), descend(cursor, x.id, G.extensionField.id, rs.extension), descend(cursor, x.id, G.sha1Field.id, rs.sha1), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.widthField,G.heightField,G.extensionField,G.sha1Field]))) }
export function renderIfIf(f: (_condition: D, _trueStatements: D, _falseStatements: D, __if: G.If, cursor: Cursor) => Maybe<D>, rs: {condition?: Render, trueStatements?: Render, falseStatements?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.If.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.conditionField.id, rs.condition), descend(cursor, x.id, G.trueStatementsField.id, rs.trueStatements), descend(cursor, x.id, G.falseStatementsField.id, rs.falseStatements), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.conditionField,G.trueStatementsField,G.falseStatementsField]))) }
export function renderIfJavaScriptProgram(f: (_statements: D, __javascriptProgram: G.JavaScriptProgram, cursor: Cursor) => Maybe<D>, rs: {statements?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.JavaScriptProgram.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.statementsField.id, rs.statements), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.statementsField]))) }
export function renderIfJSONArray(f: (_jsonArray: D, __jsonArray: G.JSONArray, cursor: Cursor) => Maybe<D>, rs: {jsonArray?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.JSONArray.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.jsonArrayField.id, rs.jsonArray), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.jsonArrayField]))) }
export function renderIfJSONNumber(f: (_jsonNumber: D, __jsonNumber: G.JSONNumber, cursor: Cursor) => Maybe<D>, rs: {jsonNumber?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.JSONNumber.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.jsonNumberField.id, rs.jsonNumber), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.jsonNumberField]))) }
export function renderIfJSONObject(f: (_keyValuePairs: D, __jsonObject: G.JSONObject, cursor: Cursor) => Maybe<D>, rs: {keyValuePairs?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.JSONObject.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.keyValuePairsField.id, rs.keyValuePairs), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.keyValuePairsField]))) }
export function renderIfJSONString(f: (_jsonString: D, __jsonString: G.JSONString, cursor: Cursor) => Maybe<D>, rs: {jsonString?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.JSONString.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.jsonStringField.id, rs.jsonString), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.jsonStringField]))) }
export function renderIfKeyValue(f: (_objectKey: D, _objectValue: D, __keyValue: G.KeyValue, cursor: Cursor) => Maybe<D>, rs: {objectKey?: Render, objectValue?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.KeyValue.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.objectKeyField.id, rs.objectKey), descend(cursor, x.id, G.objectValueField.id, rs.objectValue), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.objectKeyField,G.objectValueField]))) }
export function renderIfKeyValuePair(f: (_key: D, _value: D, __keyValuePair: G.KeyValuePair, cursor: Cursor) => Maybe<D>, rs: {key?: Render, value?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.KeyValuePair.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.keyField.id, rs.key), descend(cursor, x.id, G.valueField.id, rs.value), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.keyField,G.valueField]))) }
export function renderIfLabel(f: (_field: D, _child: D, __label: G.Label, cursor: Cursor) => Maybe<D>, rs: {field?: Render, child?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Label.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.fieldField.id, rs.field), descend(cursor, x.id, G.childField.id, rs.child), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.fieldField,G.childField]))) }
export function renderIfLessThan(f: (__lessThan: G.LessThan, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.LessThan.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfLessThanOrEqualTo(f: (__lessThanOrEqualTo: G.LessThanOrEqualTo, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.LessThanOrEqualTo.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfLet(f: (__let: G.Let, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Let.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfLine(f: (_children: D, __line: G.Line, cursor: Cursor) => Maybe<D>, rs: {children?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Line.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.childrenField.id, rs.children), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.childrenField]))) }
export function renderIfListType(f: (_type: D, __listType: G.ListType, cursor: Cursor) => Maybe<D>, rs: {type?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.ListType.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.typeField.id, rs.type), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.typeField]))) }
export function renderIfLoadAWS(f: (_bucket: D, _credentials: D, _key: D, __loadAWS: G.LoadAWS, cursor: Cursor) => Maybe<D>, rs: {bucket?: Render, credentials?: Render, key?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.LoadAWS.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.bucketField.id, rs.bucket), descend(cursor, x.id, G.credentialsField.id, rs.credentials), descend(cursor, x.id, G.keyField.id, rs.key), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.bucketField,G.credentialsField,G.keyField]))) }
export function renderIfLoadJSON(f: (_url: D, __loadJSON: G.LoadJSON, cursor: Cursor) => Maybe<D>, rs: {url?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.LoadJSON.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.urlField.id, rs.url), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.urlField]))) }
export function renderIfModule(f: (_ctorOrAlgebraicTypes: D, _data: D, _renderCtors: D, _transformations: D, __module: G.Module, cursor: Cursor) => Maybe<D>, rs: {ctorOrAlgebraicTypes?: Render, data?: Render, renderCtors?: Render, transformations?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Module.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.ctorOrAlgebraicTypesField.id, rs.ctorOrAlgebraicTypes), descend(cursor, x.id, G.dataField.id, rs.data), descend(cursor, x.id, G.renderCtorsField.id, rs.renderCtors), descend(cursor, x.id, G.transformationsField.id, rs.transformations), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.ctorOrAlgebraicTypesField,G.dataField,G.renderCtorsField,G.transformationsField]))) }
export function renderIfNetworkEntry(f: (_weight: D, _lifetimeCap: D, _name: D, __networkEntry: G.NetworkEntry, cursor: Cursor) => Maybe<D>, rs: {weight?: Render, lifetimeCap?: Render, name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.NetworkEntry.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.weightField.id, rs.weight), descend(cursor, x.id, G.lifetimeCapField.id, rs.lifetimeCap), descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.weightField,G.lifetimeCapField,G.nameField]))) }
export function renderIfNew(f: (_expression: D, _arguments: D, __new: G.New, cursor: Cursor) => Maybe<D>, rs: {expression?: Render, arguments?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.New.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.expressionField.id, rs.expression), descend(cursor, x.id, G.argumentsField.id, rs.arguments), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.expressionField,G.argumentsField]))) }
export function renderIfNotEquals(f: (__notEquals: G.NotEquals, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.NotEquals.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfNull(f: (__null: G.Null, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Null.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfObjectLiteral(f: (_keyValues: D, __objectLiteral: G.ObjectLiteral, cursor: Cursor) => Maybe<D>, rs: {keyValues?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.ObjectLiteral.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.keyValuesField.id, rs.keyValues), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.keyValuesField]))) }
export function renderIfOr(f: (__or: G.Or, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Or.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfParameter(f: (_name: D, __parameter: G.Parameter, cursor: Cursor) => Maybe<D>, rs: {name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Parameter.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField]))) }
export function renderIfPlatform(f: (_name: D, __platform: G.Platform, cursor: Cursor) => Maybe<D>, rs: {name?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Platform.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField]))) }
export function renderIfProduct(f: (__product: G.Product, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Product.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfPutAWS(f: (_bucket: D, _credentials: D, _key: D, _string: D, __putAWS: G.PutAWS, cursor: Cursor) => Maybe<D>, rs: {bucket?: Render, credentials?: Render, key?: Render, string?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.PutAWS.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.bucketField.id, rs.bucket), descend(cursor, x.id, G.credentialsField.id, rs.credentials), descend(cursor, x.id, G.keyField.id, rs.key), descend(cursor, x.id, G.stringField.id, rs.string), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.bucketField,G.credentialsField,G.keyField,G.stringField]))) }
export function renderIfPutAWSSucceeded(f: (__putAWSSucceeded: G.PutAWSSucceeded, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.PutAWSSucceeded.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfQuotient(f: (__quotient: G.Quotient, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Quotient.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfRenderCtor(f: (_forCtor: D, _d: D, __renderCtor: G.RenderCtor, cursor: Cursor) => Maybe<D>, rs: {forCtor?: Render, d?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.RenderCtor.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.forCtorField.id, rs.forCtor), descend(cursor, x.id, G.dField.id, rs.d), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.forCtorField,G.dField]))) }
export function renderIfRenderList(f: (_opening: D, _closing: D, _separator: D, _contextRender: D, __renderList: G.RenderList, cursor: Cursor) => Maybe<D>, rs: {opening?: Render, closing?: Render, separator?: Render, contextRender?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.RenderList.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.openingField.id, rs.opening), descend(cursor, x.id, G.closingField.id, rs.closing), descend(cursor, x.id, G.separatorField.id, rs.separator), descend(cursor, x.id, G.contextRenderField.id, rs.contextRender), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.openingField,G.closingField,G.separatorField,G.contextRenderField]))) }
export function renderIfRenderNameShallow(f: (_forCtor: D, __renderNameShallow: G.RenderNameShallow, cursor: Cursor) => Maybe<D>, rs: {forCtor?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.RenderNameShallow.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.forCtorField.id, rs.forCtor), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.forCtorField]))) }
export function renderIfReturn(f: (_expression: D, __return: G.Return, cursor: Cursor) => Maybe<D>, rs: {expression?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Return.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.expressionField.id, rs.expression), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.expressionField]))) }
export function renderIfRootViews(f: (_root: D, _views: D, __rootViews: G.RootViews, cursor: Cursor) => Maybe<D>, rs: {root?: Render, views?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.RootViews.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.rootField.id, rs.root), descend(cursor, x.id, G.viewsField.id, rs.views), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.rootField,G.viewsField]))) }
export function renderIfStrictEquals(f: (__strictEquals: G.StrictEquals, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.StrictEquals.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfStrictNotEquals(f: (__strictNotEquals: G.StrictNotEquals, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.StrictNotEquals.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfSum(f: (__sum: G.Sum, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Sum.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfUndefined(f: (__undefined: G.Undefined, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Undefined.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfVar(f: (__var: G.Var, cursor: Cursor) => Maybe<D>, rs: {} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.Var.fromID(id)), x => mapMaybe(f(x, cursor), d => renderOtherFields(cursor, sourceID, d, []))) }
export function renderIfVariableDeclaration(f: (_name: D, _constLetVar: D, _expression: D, __variableDeclaration: G.VariableDeclaration, cursor: Cursor) => Maybe<D>, rs: {name?: Render, constLetVar?: Render, expression?: Render} = {}): Render { return (cursor, sourceID) => bindMaybe(bindMaybe(sourceID, ({id}) => G.VariableDeclaration.fromID(id)), x => mapMaybe(f(descend(cursor, x.id, G.nameField.id, rs.name), descend(cursor, x.id, G.constLetVarField.id, rs.constLetVar), descend(cursor, x.id, G.expressionField.id, rs.expression), x, cursor), d => renderOtherFields(cursor, sourceID, d, [G.nameField,G.constLetVarField,G.expressionField]))) }